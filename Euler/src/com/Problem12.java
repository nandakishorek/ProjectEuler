package com;

/**
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1 
 * 3: 1,3 
 * 6: 1,2,3,6 
 * 10: 1,2,5,10 
 * 15: 1,3,5,15 
 * 21: 1,3,7,21 
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 * 
 * 
 * 
 * @author nandakri
 *
 */
public class Problem12 {

    /**
     *  I am using the algorithm to find the number of factors by prime factorization
     * @param args
     */
    public static void main(String[] args) {
        
        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23}; // only 9 prime numbers, 2^9 = 512, does this work?
        
        int n = 1;
        int divisors;
        long sigmaN;
        do {
            sigmaN = n * (n + 1) / 2;
            divisors = 1; // number of divisors for current triangular number
            
            long dividend = sigmaN;
            for (int j = 0; j < primes.length; ++j) {
                int curDivCount = 0;
                while (dividend > 0 && (dividend % primes[j] == 0)) {
                    dividend /= primes[j];
                    ++curDivCount;
                }
                if (curDivCount > 0) {
                    divisors *= (curDivCount + 1);
                }
            }
            
            ++n;
        } while (divisors < 501);
        
        System.out.println(sigmaN);
    }

}
